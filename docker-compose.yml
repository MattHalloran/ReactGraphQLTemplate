version: "3.9"
services:
    main:
        build:
            context: .
            dockerfile: ./packages/Dockerfile
            args:
                PROJECT_DIR: "${PROJECT_DIR}"
        container_name: main
        environment: 
            NODE_ENV: "${NODE_ENV}"
            JWT_SECRET: "${JWT_SECRET}"
            PROJECT_DIR: "${PROJECT_DIR}"
            DB_HOST: "db"
            DB_PORT: "5432"
            DB_NAME: "${DB_NAME}"
            DB_USER: "${DB_USER}"
            DB_PASSWORD: "${DB_PASSWORD}"
            REDIS_CONN: "${REDIS_CONN}"
            ADMIN_EMAIL: "${ADMIN_EMAIL}"
            ADMIN_PASSWORD: "${ADMIN_PASSWORD}"
            SITE_EMAIL_FROM: "${SITE_EMAIL_FROM}"
            SITE_EMAIL_USERNAME: "${SITE_EMAIL_USERNAME}"
            SITE_EMAIL_PASSWORD: "${SITE_EMAIL_PASSWORD}"
            REACT_APP_SITE_NAME: "${SITE_NAME}"
            REACT_APP_SERVER_ROUTE: "${REACT_APP_SERVER_ROUTE}"
            UI_PORT: "${UI_PORT}"
            SERVER_PORT: "${SERVER_PORT}"
        ports:
            - 3000:3000
            - 5000:5000
        volumes:
            - ./packages:${PROJECT_DIR}/packages
            - ./assets:${PROJECT_DIR}/assets
            - ./scripts:${PROJECT_DIR}/scripts
        depends_on: 
                - redis
                - db
    db:
        image: postgres:13
        restart: always
        environment: 
            POSTGRES_DB: "${DB_NAME}"
            POSTGRES_USER: "${DB_USER}"
            POSTGRES_PASSWORD: "${DB_PASSWORD}"
        ports:
                - 5432:5432
        volumes:
            - ./data/postgres:/var/lib/postgresql/data
    # adminer:
    #     image: adminer
    #     restart: always
    #     depends_on: 
    #         - db
    #     ports: 
    #         - 8080:8080
    redis:
        image: redis
        container_name: redis
        ports:
            - 6379:6379
    nginx:
        image: nginx:1.15-alpine
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - ./data/nginx:/etc/nginx/conf.d
            - ./data/certbot/conf:/etc/letsencrypt
            - ./data/certbot/www:/var/www/certbot
        command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    certbot:
        image: certbot/certbot
        volumes:
            - ./data/certbot/conf:/etc/letsencrypt
            - ./data/certbot/www:/var/www/certbot
        entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"